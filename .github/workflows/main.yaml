# Deploy Gatsby to Self Managed Server
name: Deploy Website

# Controls when the workflow will run
on:
  # Triggers the workflow on push request events but only for the main branch
  push:
    branches: [ main, test ]
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Allows A Webhook to be called which will run the Action. Use this for example from WordPress with the GatsbyJS plugin.
  repository_dispatch:
    types: [ publish_blog ]
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out latest code
        uses: actions/checkout@v3

      - name: 'Create env file'
        run: |
          touch .env.production
          echo API_URL=${{ secrets.API_URL }} >> .env.production
          cat .env.production

      # Grab the required version of NodeJS
      - name: Set Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.x

     # Install all the Node dependencies for Gatsby, using your package.json file.
      - name: Install Dependencies
        run: npm i --save

     # Speaks for itself no?
      - name: Build Gatsby
        run: npm run build

     # This was the hardest part for me to figure out - see article for more details
      - name: Install Deployment SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{secrets.SSH_KEY}}
          known_hosts: unnecessary

      - name: Adding Known Hosts
        run: ssh-keyscan -p21098 -H ${{ secrets.SSH_HOST_IP }} >> ~/.ssh/known_hosts
          
     # Finally, deploy it to your very own server
      - name: Deploy To Live
        run: rsync -avzh --delete -e 'ssh -p21098 -o PubkeyAcceptedKeyTypes=ssh-rsa -oHostKeyAlgorithms=+ssh-rsa' public/* --rsync-path='mkdir -p ${{secrets.TARGET_DIR}} && rsync' ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST_IP }}:${{secrets.TARGET_DIR}}
